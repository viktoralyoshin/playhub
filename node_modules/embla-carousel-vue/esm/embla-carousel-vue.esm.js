import { ref, isRef, onMounted, onBeforeUnmount, watch } from 'vue';
import { canUseDOM, areOptionsEqual, arePluginsEqual } from 'embla-carousel-reactive-utils';
import EmblaCarousel from 'embla-carousel';

function emblaCarouselVue(options = {}, plugins = []) {
  const storedOptions = ref(isRef(options) ? options.value : options);
  const storedPlugins = ref(isRef(plugins) ? plugins.value : plugins);
  const emblaNode = ref();
  const emblaApi = ref();
  function reInit() {
    if (!emblaApi.value) return;
    emblaApi.value.reInit(storedOptions.value, storedPlugins.value);
  }
  onMounted(() => {
    if (!canUseDOM() || !emblaNode.value) return;
    EmblaCarousel.globalOptions = emblaCarouselVue.globalOptions;
    emblaApi.value = EmblaCarousel(emblaNode.value, storedOptions.value, storedPlugins.value);
  });
  onBeforeUnmount(() => {
    if (emblaApi.value) emblaApi.value.destroy();
  });
  if (isRef(options)) {
    watch(options, newOptions => {
      if (areOptionsEqual(storedOptions.value, newOptions)) return;
      storedOptions.value = newOptions;
      reInit();
    });
  }
  if (isRef(plugins)) {
    watch(plugins, newPlugins => {
      if (arePluginsEqual(storedPlugins.value, newPlugins)) return;
      storedPlugins.value = newPlugins;
      reInit();
    });
  }
  return [emblaNode, emblaApi];
}
emblaCarouselVue.globalOptions = undefined;

export { emblaCarouselVue as default };
//# sourceMappingURL=embla-carousel-vue.esm.js.map
