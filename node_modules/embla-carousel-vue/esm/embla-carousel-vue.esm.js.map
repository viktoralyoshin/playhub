{"version":3,"file":"embla-carousel-vue.esm.js","sources":["../src/components/emblaCarouselVue.ts"],"sourcesContent":["import { Ref, ref, isRef, watch, onMounted, onBeforeUnmount } from 'vue'\nimport {\n  areOptionsEqual,\n  arePluginsEqual,\n  canUseDOM\n} from 'embla-carousel-reactive-utils'\nimport EmblaCarousel, {\n  EmblaCarouselType,\n  EmblaOptionsType,\n  EmblaPluginType\n} from 'embla-carousel'\n\nexport type EmblaCarouselVueType = [\n  Ref<HTMLElement | undefined>,\n  Ref<EmblaCarouselType | undefined>\n]\n\nfunction emblaCarouselVue(\n  options: EmblaOptionsType | Ref<EmblaOptionsType> = {},\n  plugins: EmblaPluginType[] | Ref<EmblaPluginType[]> = []\n): EmblaCarouselVueType {\n  const storedOptions = ref(isRef(options) ? options.value : options)\n  const storedPlugins = ref(isRef(plugins) ? plugins.value : plugins)\n  const emblaNode = ref<HTMLElement>()\n  const emblaApi = ref<EmblaCarouselType>()\n\n  function reInit() {\n    if (!emblaApi.value) return\n    emblaApi.value.reInit(storedOptions.value, storedPlugins.value)\n  }\n\n  onMounted(() => {\n    if (!canUseDOM() || !emblaNode.value) return\n    EmblaCarousel.globalOptions = emblaCarouselVue.globalOptions\n    emblaApi.value = EmblaCarousel(\n      emblaNode.value,\n      storedOptions.value,\n      storedPlugins.value\n    )\n  })\n\n  onBeforeUnmount(() => {\n    if (emblaApi.value) emblaApi.value.destroy()\n  })\n\n  if (isRef(options)) {\n    watch(options, (newOptions) => {\n      if (areOptionsEqual(storedOptions.value, newOptions)) return\n      storedOptions.value = newOptions\n      reInit()\n    })\n  }\n\n  if (isRef(plugins)) {\n    watch(plugins, (newPlugins) => {\n      if (arePluginsEqual(storedPlugins.value, newPlugins)) return\n      storedPlugins.value = newPlugins\n      reInit()\n    })\n  }\n\n  return [emblaNode, emblaApi]\n}\n\nemblaCarouselVue.globalOptions = <EmblaOptionsType | undefined>undefined\n\nexport default emblaCarouselVue\n"],"names":["emblaCarouselVue","options","plugins","storedOptions","ref","isRef","value","storedPlugins","emblaNode","emblaApi","reInit","onMounted","canUseDOM","EmblaCarousel","globalOptions","onBeforeUnmount","destroy","watch","newOptions","areOptionsEqual","newPlugins","arePluginsEqual","undefined"],"mappings":";;;;AAiBA,SAASA,gBAAgBA,CACvBC,OAAA,GAAoD,EAAE,EACtDC,UAAsD,EAAE,EAAA;AAExD,EAAA,MAAMC,aAAa,GAAGC,GAAG,CAACC,KAAK,CAACJ,OAAO,CAAC,GAAGA,OAAO,CAACK,KAAK,GAAGL,OAAO,CAAC,CAAA;AACnE,EAAA,MAAMM,aAAa,GAAGH,GAAG,CAACC,KAAK,CAACH,OAAO,CAAC,GAAGA,OAAO,CAACI,KAAK,GAAGJ,OAAO,CAAC,CAAA;AACnE,EAAA,MAAMM,SAAS,GAAGJ,GAAG,EAAe,CAAA;AACpC,EAAA,MAAMK,QAAQ,GAAGL,GAAG,EAAqB,CAAA;EAEzC,SAASM,MAAMA,GAAA;AACb,IAAA,IAAI,CAACD,QAAQ,CAACH,KAAK,EAAE,OAAA;AACrBG,IAAAA,QAAQ,CAACH,KAAK,CAACI,MAAM,CAACP,aAAa,CAACG,KAAK,EAAEC,aAAa,CAACD,KAAK,CAAC,CAAA;AACjE,GAAA;AAEAK,EAAAA,SAAS,CAAC,MAAK;IACb,IAAI,CAACC,SAAS,EAAE,IAAI,CAACJ,SAAS,CAACF,KAAK,EAAE,OAAA;AACtCO,IAAAA,aAAa,CAACC,aAAa,GAAGd,gBAAgB,CAACc,aAAa,CAAA;AAC5DL,IAAAA,QAAQ,CAACH,KAAK,GAAGO,aAAa,CAC5BL,SAAS,CAACF,KAAK,EACfH,aAAa,CAACG,KAAK,EACnBC,aAAa,CAACD,KAAK,CACpB,CAAA;AACH,GAAC,CAAC,CAAA;AAEFS,EAAAA,eAAe,CAAC,MAAK;IACnB,IAAIN,QAAQ,CAACH,KAAK,EAAEG,QAAQ,CAACH,KAAK,CAACU,OAAO,EAAE,CAAA;AAC9C,GAAC,CAAC,CAAA;AAEF,EAAA,IAAIX,KAAK,CAACJ,OAAO,CAAC,EAAE;AAClBgB,IAAAA,KAAK,CAAChB,OAAO,EAAGiB,UAAU,IAAI;MAC5B,IAAIC,eAAe,CAAChB,aAAa,CAACG,KAAK,EAAEY,UAAU,CAAC,EAAE,OAAA;MACtDf,aAAa,CAACG,KAAK,GAAGY,UAAU,CAAA;AAChCR,MAAAA,MAAM,EAAE,CAAA;AACV,KAAC,CAAC,CAAA;AACJ,GAAA;AAEA,EAAA,IAAIL,KAAK,CAACH,OAAO,CAAC,EAAE;AAClBe,IAAAA,KAAK,CAACf,OAAO,EAAGkB,UAAU,IAAI;MAC5B,IAAIC,eAAe,CAACd,aAAa,CAACD,KAAK,EAAEc,UAAU,CAAC,EAAE,OAAA;MACtDb,aAAa,CAACD,KAAK,GAAGc,UAAU,CAAA;AAChCV,MAAAA,MAAM,EAAE,CAAA;AACV,KAAC,CAAC,CAAA;AACJ,GAAA;AAEA,EAAA,OAAO,CAACF,SAAS,EAAEC,QAAQ,CAAC,CAAA;AAC9B,CAAA;AAEAT,gBAAgB,CAACc,aAAa,GAAiCQ,SAAS;;;;"}