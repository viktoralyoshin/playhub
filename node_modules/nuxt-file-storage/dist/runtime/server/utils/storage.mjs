import { writeFile, rm, mkdir } from "fs/promises";
import { useRuntimeConfig } from "#imports";
export const storeFileLocally = async (dataurl, fileNameOrIdLength, filelocation = "") => {
  const { binaryString, ext } = parseDataUrl(dataurl);
  const location = useRuntimeConfig().public.fileStorage.mount;
  const filename = typeof fileNameOrIdLength == "number" ? generateRandomId(fileNameOrIdLength) : fileNameOrIdLength;
  await mkdir(`${location}${filelocation}`, { recursive: true });
  await writeFile(`${location}${filelocation}/${filename}.${ext}`, binaryString, {
    flag: "w"
  });
  return `${filename}.${ext}`;
};
export const deleteFile = async (filename, filelocation = "") => {
  const location = useRuntimeConfig().public.fileStorage.mount;
  await rm(`${location}${filelocation}/${filename}`);
};
const generateRandomId = (length) => {
  const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  let randomId = "";
  for (let i = 0; i < length; i++) {
    randomId += characters.charAt(Math.floor(Math.random() * characters.length));
  }
  return randomId;
};
export const parseDataUrl = (file) => {
  const arr = file.split(",");
  const mimeMatch = arr[0].match(/:(.*?);/);
  if (!mimeMatch) {
    throw new Error("Invalid data URL");
  }
  const mime = mimeMatch[1];
  const base64String = arr[1];
  const binaryString = Buffer.from(base64String, "base64");
  const ext = mime.split("/")[1];
  return { binaryString, ext };
};
